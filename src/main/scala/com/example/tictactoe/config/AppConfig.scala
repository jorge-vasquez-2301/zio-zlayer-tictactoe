package com.example.tictactoe.config

import zio._

// No need to define config as a service, just a normal case class
// No need to obtain config from the environment, which means no need to use ZLayer
// No need to pass around config to constructors of services
// You can use HOCON instead of properties files, because nested config is supported
// Integrated into ZIO itself, you just need zio-config-typesafe for being able to read HOCON files
// and zio-config-magnolia for auto-derivation

// However, reports similar to the ones generated by clearconfig are not available for now
final case class AppConfig(
  controller: AppConfig.Controller,
  view: AppConfig.View,
  ai: AppConfig.AI
)
object AppConfig {
  val config =
    (Controller.config.nested("controller") ++
      View.config.nested("view") ++
      AI.config.nested("ai")).map((AppConfig.apply _).tupled)

  final case class Controller(shutdownMessage: String)
  object Controller {
    val config = Config.string("shutdownMessage").withDefault("Shutting down...").map(Controller(_))
  }

  final case class View(confirm: View.Confirm, game: View.Game, menu: View.Menu)
  object View {
    val config =
      (Confirm.config.nested("confirm") ++
        Game.config.nested("game") ++
        Menu.config.nested("menu")).map((View.apply _).tupled)

    final case class Confirm(invalidCommandMessage: String)
    object Confirm {
      val config = Config.string("invalidCommandMessage").withDefault("Invalid command. Try again.").map(Confirm(_))
    }

    final case class Game(invalidCommandMessage: String, fieldOccupiedMessage: String)
    object Game {
      val config =
        (Config.string("invalidCommandMessage").withDefault("Invalid command. Try again.") ++
          Config.string("fieldOccupiedMessage").withDefault("Field occupied. Try another.")).map((Game.apply _).tupled)
    }

    final case class Menu(invalidCommandMessage: String)
    object Menu {
      val config = Config.string("invalidCommandMessage").withDefault("Invalid command. Try again.").map(Menu(_))
    }
  }

  final case class AI(randomGenRepetitions: Int)
  object AI {
    val config = Config.int("randomGenRepetitions").map(AI(_))
  }
}
